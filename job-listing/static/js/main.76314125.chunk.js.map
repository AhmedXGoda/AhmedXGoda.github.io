{"version":3,"sources":["redux/jobs.js","redux/Action_Types.js","shared/baseUrl.js","redux/Action_Creators.js","components/HeaderComponent.js","components/LoadingComponent.js","components/JobsComponent.js","components/MainComponent.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["Jobs","state","isLoading","errMess","jobs","action","type","payload","baseUrl","jobsLoading","jobsFailed","addJobs","Header","className","Loading","RenderJob","job","addRole","addLevel","addLanguage","addTool","handleClick","controls","useAnimation","useInView","ref","inView","useEffect","start","div","initial","animate","variants","visible","opacity","hidden","transition","transitionDuration","featured","new","src","logo","alt","company","position","postedAt","contract","location","onClick","e","target","innerHTML","role","level","languages","map","lang","key","includes","concat","undefined","tools","tool","RenderFilterBox","clearFilters","List","filter","existedRole","existedLevel","existedLanguages","every","i","existedTools","isRoleNull","isLevelNull","isLanguagesUndefined","length","isToolsUndefined","id","props","event","containerFilter","document","querySelector","filters","span","createElement","addEventListener","setState","indexOf","splice","remove","querySelectorAll","style","display","appendChild","spans","value","this","React","Component","Main","fetchJobs","connect","dispatch","fetch","then","response","ok","error","Error","status","statusText","message","json","catch","store","createStore","combineReducers","applyMiddleware","thunk","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"2SAEaA,EAAO,WAED,IAFEC,EAEH,uDAFW,CACzBC,WAAW,EAAMC,QAAS,KAAMC,KAAM,IACnCC,EAAW,uCAEV,OAAOA,EAAOC,MACV,ICPY,WDQR,OAAO,eAAIL,EAAX,CAAkBC,WAAW,EAAOC,QAAS,KAAMC,KAAMC,EAAOE,UAEpE,ICTgB,eDUZ,OAAO,eAAIN,EAAX,CAAkBC,WAAW,EAAMC,QAAS,KAAMC,KAAM,KAE5D,ICXe,cDYX,OAAO,eAAIH,EAAX,CAAkBC,WAAW,EAAOC,QAASE,EAAOE,QAASH,KAAM,KAEvE,QACI,OAAOH,I,eEjBVO,EAAU,yECsBVC,EAAc,iBAAO,CAC9BH,KFtBwB,iBEyBfI,EAAa,SAACP,GAAD,MAAc,CACpCG,KFzBuB,cE0BvBC,QAASJ,IAGAQ,EAAU,SAACP,GAAD,MAAW,CAC9BE,KFhCoB,WEiCpBC,QAASH,ICrBEQ,EAVA,WACX,OACI,gCACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,W,wBCJlBC,EAAU,WACnB,OACI,yBAAKD,UAAU,UACX,0BAAMA,UAAU,wCAChB,8C,gBCANE,EAAY,SAAC,GAAyE,IAAxEC,EAAuE,EAAvEA,IAAKf,EAAkE,EAAlEA,MAAOgB,EAA2D,EAA3DA,QAASC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,QAAUC,EAAiB,EAAjBA,YAEhEC,EAAWC,cAFsE,EAGjEC,cAHiE,mBAGhFC,EAHgF,KAG3EC,EAH2E,KAavF,OARAC,qBAAU,WACFD,EACAJ,EAASM,MAAM,WAEfN,EAASM,MAAM,YAEpB,CAACN,EAAUI,IAGV,kBAAC,IAAOG,IAAR,CAAYJ,IAAKA,EAAKK,QAAS,SAAUC,QAAST,EAClDU,SAAU,CACNC,QAAS,CAAEC,QAAS,GACpBC,OAAQ,CAAED,QAAS,GACnBE,WAAY,CAAEC,mBAAoB,IAEtCxB,UAAS,aAAQG,EAAIsB,UAAYtB,EAAIuB,IAAM,cAAgB,KACvD,yBAAK1B,UAAU,OACX,yBAAK2B,IAAKhC,EAAUQ,EAAIyB,KAAMC,IAAK1B,EAAI2B,WAE3C,yBAAK9B,UAAU,QACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,WACX,4BAAKG,EAAI2B,SAAc3B,EAAIuB,IAAO,0BAAM1B,UAAU,OAAhB,QAAoC,KAAMG,EAAIsB,SAAY,0BAAMzB,UAAU,YAAhB,YAA6C,MAE7I,yBAAKA,UAAU,YACX,4BAAKG,EAAI4B,WAEb,yBAAK/B,UAAU,WACX,2BAAIG,EAAI6B,SAAR,IAAkB,0BAAMhC,UAAU,QAAlC,IAAiDG,EAAI8B,SAArD,IAA+D,0BAAMjC,UAAU,QAA/E,IAA8FG,EAAI+B,aAI9G,yBAAKlC,UAAU,WACX,0BAAMmC,QACF,SAACC,GACOA,EAAEC,OAAOC,YAAclD,EAAMmD,OAC7B/B,EAAY4B,GACZhC,EAAQgC,EAAEC,OAAOC,cAGtBnC,EAAIoC,MAAY,0BAAMJ,QACrB,SAACC,GACOA,EAAEC,OAAOC,YAAclD,EAAMoD,QAC7BhC,EAAY4B,GACZ/B,EAAS+B,EAAEC,OAAOC,cAI3BnC,EAAIqC,OAAcrC,EAAIsC,UAAUC,KAAI,SAAAC,GAAI,OAAK,0BAAMC,IAAKD,EAAMR,QAC7D,SAACC,GACQhD,EAAMqD,UAAUI,SAASF,KAC1BnC,EAAY4B,GACZ9B,EAAYlB,EAAMqD,UAAUK,OAAOH,OAI5CA,WAA8BI,IAAd5C,EAAI6C,MAAsB7C,EAAI6C,MAAMN,KAAI,SAAAO,GAAI,OAAK,0BAAML,IAAKK,EAAMd,QACjF,SAACC,GACQhD,EAAM4D,MAAMH,SAASI,KACtBzC,EAAY4B,GACZ7B,EAAQnB,EAAM4D,MAAMF,OAAOG,OAGpCA,MAAgB,QAMjCC,EAAkB,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEtB,OACI,yBAAKnD,UAAU,kBACX,yBAAKA,UAAU,YACf,yBAAKA,UAAU,aACX,4BAAQmC,QAASgB,GAAjB,YAMVC,EAAO,SAAC,GAA6F,IAA5F/D,EAA2F,EAA3FA,UAAWC,EAAgF,EAAhFA,QAASC,EAAuE,EAAvEA,KAAMH,EAAiE,EAAjEA,MAAOgB,EAA0D,EAA1DA,QAASC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,YAErF,OAAInB,EAEI,kBAAC,EAAD,MAEGC,EAEH,2BAAIA,GAIJ,oCAEKC,EAAK8D,QAAO,SAAAlD,GAIT,IAAMmD,EAAcnD,EAAIoC,OAASnD,EAAMmD,KACjCgB,EAAepD,EAAIqC,QAAUpD,EAAMoD,MACnCgB,EAAmBpE,EAAMqD,UAAUgB,OAAM,SAAAC,GAAC,OAAIvD,EAAIsC,UAAUI,SAASa,MACrEC,EAAevE,EAAM4D,MAAMS,OAAM,SAAAC,GAAC,OAAIvD,EAAI6C,MAAMH,SAASa,MAIzDE,EAA4B,OAAfxE,EAAMmD,KACnBsB,EAA8B,OAAhBzE,EAAMoD,MACpBsB,EAAkD,IAA3B1E,EAAMqD,UAAUsB,OACvCC,EAA0C,IAAvB5E,EAAM4D,MAAMe,OAErC,OAAIH,GAAcC,GAAeC,GAAwBE,EAC9C7D,EAGH0D,GAAeC,GAAwBE,EAChCV,EAEAM,GAAcE,GAAwBE,EACtCT,EAEAK,GAAcC,GAAeG,EAE7BR,EAGAI,GAAcC,GAAeC,EAC7BH,EAIHG,GAAwBE,EACjBV,GAAeC,EAEfM,GAAeG,EACfV,GAAeE,EAEfI,GAAcI,EACdT,GAAgBC,EAEhBK,GAAeC,EACfR,GAAeK,EAEfC,GAAcE,EACdP,GAAgBI,EAEhBC,GAAcC,EACdL,GAAoBG,EAIvBK,EACOV,GAAeC,GAAgBC,EAE/BM,EACAR,GAAeC,GAAgBI,EAE/BE,EACAP,GAAeE,GAAoBG,EAEnCC,EACAL,GAAgBC,GAAoBG,EAGpCL,GAAeC,GAAgBC,GAAoBG,KAK3EjB,KAAI,SAAAvC,GACH,OACI,kBAAC,EAAD,CAAWyC,IAAKzC,EAAI8D,GAAI9D,IAAKA,EAC7Bf,MAAOA,EACPgB,QAASA,EACTC,SAAUA,EACVC,YAAaA,EACbC,QAASA,EACTC,YAAaA,SAqHtBrB,E,kDA1GX,WAAY+E,GAAQ,IAAD,8BACf,cAAMA,IAUV1D,YAAc,SAAC2D,GACX,IAAMC,EAAkBC,SAASC,cAAc,qBACzCC,EAAUF,SAASC,cAAc,wBACjCE,EAAOH,SAASI,cAAc,QAEpCD,EAAKlC,UAAY6B,EAAM9B,OAAOC,UAE9BkC,EAAKE,iBAAiB,SAAS,SAACtC,GAE5B,GAAIA,EAAEC,OAAOC,YAAc,EAAKlD,MAAMmD,KAClC,EAAKoC,SAAS,CAACpC,KAAM,YAElB,GAAIH,EAAEC,OAAOC,YAAc,EAAKlD,MAAMoD,MACzC,EAAKmC,SAAS,CAACnC,MAAO,YAEnB,GAAI,EAAKpD,MAAMqD,UAAUI,SAAST,EAAEC,OAAOC,WAAY,CAC1D,IAAMP,EAAW,EAAK3C,MAAMqD,UAAUmC,QAAQxC,EAAEC,OAAOC,WACjDG,EAAS,YAAO,EAAKrD,MAAMqD,WACjCA,EAAUoC,OAAO9C,EAAU,GAC3B,EAAK4C,SAAS,CAAClC,UAAWA,SAEvB,GAAI,EAAKrD,MAAM4D,MAAMH,SAAST,EAAEC,OAAOC,WAAY,CACtD,IAAMP,EAAW,EAAK3C,MAAM4D,MAAM4B,QAAQxC,EAAEC,OAAOC,WAC7CU,EAAK,YAAO,EAAK5D,MAAM4D,OAC7BA,EAAM6B,OAAO9C,EAAU,GACvB,EAAK4C,SAAS,CAAC3B,MAAOA,IAE1BwB,EAAKM,SAEgB,IADPT,SAASU,iBAAiB,6BAC9BhB,SAAcK,EAAgBY,MAAMC,QAAU,WAE5DV,EAAQW,YAAYV,GAEpBH,SAASC,cAAc,eAAeY,YAAYX,GACZ,SAAlCH,EAAgBY,MAAMC,UACtBb,EAAgBY,MAAMC,QAAU,SA9CrB,EAkDnB9B,aAAe,WACX,EAAKwB,SAAS,CACVpC,KAAM,KACNE,UAAW,GACXO,MAAO,GACPR,MAAO,OAGX,IARiB,EAQX2C,EAAQd,SAASU,iBAAiB,6BARvB,cAUAI,GAVA,IAUjB,2BAAwB,SACfL,UAXQ,8BAajBT,SAASC,cAAc,qBAAqBU,MAAMC,QAAU,QA/D7C,EAkEnB7E,QAAU,SAACgF,GACP,EAAKT,SAAS,CAACpC,KAAM6C,KAnEN,EAsEnB/E,SAAW,SAAC+E,GACR,EAAKT,SAAS,CAACnC,MAAO4C,KAvEP,EA0EnB9E,YAAc,SAAC8E,GACX,EAAKT,SAAS,CAAClC,UAAW,EAAKrD,MAAMqD,UAAUK,OAAOsC,MA3EvC,EA8EnB7E,QAAU,SAAC6E,GACP,EAAKT,SAAS,CAAC3B,MAAO,EAAK5D,MAAM4D,MAAMF,OAAOsC,MA5E9C,EAAKhG,MAAQ,CACTmD,KAAM,KACNE,UAAW,GACXO,MAAO,GACPR,MAAO,MAPI,E,qDAmFf,OACI,oCACI,yBAAKxC,UAAU,6BAA6BgF,MAAO,CAACC,QAAS,SAEzD,kBAAC,EAAD,CAAiB9B,aAAckC,KAAKlC,gBAExC,kBAAC,IAAOnC,IAAR,CAAYhB,UAAU,aAClB,kBAAC,EAAD,CAAMX,UAAWgG,KAAKnB,MAAM7E,UACxBC,QAAS+F,KAAKnB,MAAM5E,QACpBC,KAAM8F,KAAKnB,MAAM3E,KACjBH,MAAOiG,KAAKjG,MACZgB,QAASiF,KAAKjF,QACdC,SAAUgF,KAAKhF,SACfC,YAAa+E,KAAK/E,YAClBC,QAAS8E,KAAK9E,QACdC,YAAa6E,KAAK7E,oB,GApGvB8E,IAAMC,WCrLnBC,E,kLAEEH,KAAKnB,MAAMuB,c,+BAIX,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMlG,KAAM8F,KAAKnB,MAAM3E,KAAKA,KACxBF,UAAWgG,KAAKnB,MAAM3E,KAAKF,UAC3BC,QAAS+F,KAAKnB,MAAM3E,KAAKD,e,GAX1BgG,IAAMC,WAiBVG,eA3BS,SAAAtG,GACpB,MAAO,CACLG,KAAMH,EAAMG,SAIS,SAAAoG,GAAQ,MAAK,CACpCF,UAAW,WAAOE,GJVS,SAAAA,GAC3BA,EAAS/F,GAAY,IACrBgG,MAAMjG,EAAU,WACXkG,MAAK,SAAAC,GACF,GAAIA,EAASC,GAAI,OAAOD,EAEpB,IAAIE,EAAQ,IAAIC,MAAJ,gBAAmBH,EAASI,OAA5B,aAAuCJ,EAASK,aAE5D,MADAH,EAAMF,SAAWA,EACXE,KAEX,SAAAA,GAEC,MADc,IAAIC,MAAMD,EAAMI,YAGjCP,MAAK,SAAAC,GAAQ,OAAIA,EAASO,UAC1BR,MAAK,SAAAtG,GAAI,OAAIoG,EAAS7F,EAAQP,OAC9B+G,OAAM,SAAAN,GAAK,OAAIL,EAAS9F,EAAWmG,EAAMI,oBIcnCV,CAA6CF,GC3BtDe,ECDYC,YAAYC,YAAgB,CACtClH,KAAMJ,IAENuH,YAAgBC,MDWTC,E,uKARX,OACE,kBAAC,IAAD,CAAUL,MAASA,GACjB,kBAAC,EAAD,W,GALUjB,IAAMC,WEIJsB,QACW,cAA7BC,OAAO5E,SAAS6E,UAEe,UAA7BD,OAAO5E,SAAS6E,UAEhBD,OAAO5E,SAAS6E,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9C,SAAS+C,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAN,GACL0B,QAAQ1B,MAAMA,EAAMI,c","file":"static/js/main.76314125.chunk.js","sourcesContent":["import * as Action_Types from './Action_Types';\n\nexport const Jobs = (state = {\n    isLoading: true, errMess: null, jobs: []\n    }, action) => {\n\n        switch(action.type) {\n            case Action_Types.ADD_JOBS:\n                return {...state, isLoading: false, errMess: null, jobs: action.payload}\n\n            case Action_Types.JOBS_LOADING:\n                return {...state, isLoading: true, errMess: null, jobs: []}\n\n            case Action_Types.JOBS_FAILED:\n                return {...state, isLoading: false, errMess: action.payload, jobs: []}\n\n            default:\n                return state;\n        }\n}","export const ADD_JOBS = 'ADD_JOBS';\nexport const JOBS_LOADING = 'JOBS_LOADING';\nexport const JOBS_FAILED = 'JOBS_FAILED';","export const baseUrl = 'https://raw.githubusercontent.com/ahmedxgouda/job-listing-data/master/';","import * as Action_Types from './Action_Types';\nimport { baseUrl } from '../shared/baseUrl';\n\nexport const fetchJobs = () => dispatch => {\n    dispatch(jobsLoading(true));\n    fetch(baseUrl + 'db.json')\n        .then(response => {\n            if (response.ok) return response;\n            else {\n                let error = new Error(`Error ${response.status}: ${response.statusText}`);\n                error.response = response;\n                throw error;\n            }\n        }, error => {\n            let errMess = new Error(error.message);\n            throw errMess;\n        })\n        .then(response => response.json())\n        .then(jobs => dispatch(addJobs(jobs)))\n        .catch(error => dispatch(jobsFailed(error.message)));\n}\n\nexport const jobsLoading = () => ({\n    type: Action_Types.JOBS_LOADING\n});\n\nexport const jobsFailed = (errMess) => ({\n    type: Action_Types.JOBS_FAILED,\n    payload: errMess\n});\n\nexport const addJobs = (jobs) => ({\n    type: Action_Types.ADD_JOBS,\n    payload: jobs\n});","import React from 'react';\n\nconst Header = () => {\n    return (\n        <header>\n            <div className=\"header\">\n                <div className=\"img\"></div>\n            </div>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from 'react';\n\nexport const Loading = () => {\n    return (\n        <div className=\"loader\">\n            <span className=\"fas fa-spinner fa-pulse fa-3x fa-fw\"></span>\n            <p>Loading . . .</p>\n        </div>\n    );\n}","import React, { useEffect } from 'react';\nimport { Loading } from './LoadingComponent'\nimport { baseUrl } from '../shared/baseUrl';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer'\n\nconst RenderJob = ({job, state, addRole, addLevel, addLanguage, addTool,  handleClick}) => {\n\n    const controls = useAnimation();\n    const [ref, inView] = useInView();\n\n    useEffect(() => {\n        if (inView) {\n            controls.start('visible');\n        } else {\n            controls.start('hidden');\n        }\n    }, [controls, inView])\n\n    return (\n        <motion.div ref={ref} initial={'hidden'} animate={controls}\n        variants={{\n            visible: { opacity: 1 },\n            hidden: { opacity: 0 },\n            transition: { transitionDuration: 2}\n        }}\n        className={`box${job.featured && job.new ? ' box-border' : ''}`}>\n            <div className=\"img\">\n                <img src={baseUrl + job.logo} alt={job.company} />\n            </div>\n            <div className=\"text\">\n                <div className=\"info\">\n                    <div className=\"heading\">\n                        <h4>{job.company}</h4>{job.new ? (<span className=\"new\">NEW!</span>): null}{job.featured ? (<span className=\"featured\">FEATURED</span>): null}\n                    </div>\n                    <div className=\"position\">\n                        <h2>{job.position}</h2>\n                    </div>\n                    <div className=\"details\">\n                        <p>{job.postedAt} <span className=\"dot\"></span> {job.contract} <span className=\"dot\"></span> {job.location}</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"filters\">\n                <span onClick={\n                    (e) => {\n                        if (e.target.innerHTML !== state.role) {\n                            handleClick(e);\n                            addRole(e.target.innerHTML);\n                        }\n                    }\n                    }>{job.role}</span><span onClick={\n                        (e) => {\n                            if (e.target.innerHTML !== state.level) {\n                                handleClick(e);\n                                addLevel(e.target.innerHTML);\n                            }\n                        }\n\n                    }>{job.level}</span>{job.languages.map(lang => (<span key={lang} onClick={\n                        (e) => {\n                            if (!state.languages.includes(lang)) {\n                                handleClick(e);\n                                addLanguage(state.languages.concat(lang));\n                            }\n                        }\n\n                    }>{lang}</span>))}{job.tools !== undefined ? job.tools.map(tool => (<span key={tool} onClick={\n                        (e) => {\n                            if (!state.tools.includes(tool)) {\n                                handleClick(e);\n                                addTool(state.tools.concat(tool));\n                            }\n                        }\n                    }>{tool}</span>)): null}\n            </div>\n        </motion.div>\n    );\n}\n\nconst RenderFilterBox = ({clearFilters}) => {\n\n    return (\n        <div className=\"box filter-box\">\n            <div className=\"filters\"></div>\n            <div className=\"clear-btn\">\n                <button onClick={clearFilters}>Clear</button>\n            </div>\n        </div>\n    );\n}\n\nconst List = ({isLoading, errMess, jobs, state, addRole, addLevel, addLanguage, addTool, handleClick}) => {\n\n    if (isLoading) {\n        return (\n            <Loading />\n        );\n    } else if (errMess) {\n        return(\n            <p>{errMess}</p>\n        );\n    } else {\n        return (\n            <>\n                {/* eslint-disable-next-line */}\n                {jobs.filter(job => {\n\n                    // Check if items existed in state\n\n                    const existedRole = job.role === state.role;\n                    const existedLevel = job.level === state.level;\n                    const existedLanguages = state.languages.every(i => job.languages.includes(i));\n                    const existedTools = state.tools.every(i => job.tools.includes(i));\n\n                    // Check if items are null or undefined\n\n                    const isRoleNull = state.role === null;\n                    const isLevelNull = state.level === null;\n                    const isLanguagesUndefined = state.languages.length === 0;\n                    const isToolsUndefined = state.tools.length === 0;\n\n                    if (isRoleNull && isLevelNull && isLanguagesUndefined && isToolsUndefined) {\n                        return job;\n\n                    } else {\n                        if (isLevelNull && isLanguagesUndefined && isToolsUndefined) {\n                            return existedRole;\n\n                        } else if (isRoleNull && isLanguagesUndefined && isToolsUndefined) {\n                            return existedLevel;\n\n                        } else if (isRoleNull && isLevelNull && isToolsUndefined) {\n\n                            return existedLanguages;\n                            \n\n                        } else if (isRoleNull && isLevelNull && isLanguagesUndefined) {\n                            return existedTools;\n\n                        } else {\n\n                            if (isLanguagesUndefined && isToolsUndefined) {\n                                return existedRole && existedLevel;\n\n                            } else if (isLevelNull && isToolsUndefined) {\n                                return existedRole && existedLanguages;\n                                \n                            } else if (isRoleNull && isToolsUndefined) {\n                                return existedLevel && existedLanguages;\n                                \n                            } else if (isLevelNull && isLanguagesUndefined) {\n                                return existedRole && existedTools;\n\n                            } else if (isRoleNull && isLanguagesUndefined) {\n                                return existedLevel && existedTools;\n                                \n                            } else if (isRoleNull && isLevelNull) {\n                                return existedLanguages && existedTools;\n                                \n                            } else {\n\n                                if (isToolsUndefined) {\n                                    return existedRole && existedLevel && existedLanguages\n\n                                } else if (isLanguagesUndefined) {\n                                    return existedRole && existedLevel && existedTools;\n\n                                } else if (isLevelNull) {\n                                    return existedRole && existedLanguages && existedTools;\n\n                                } else if (isRoleNull) {\n                                    return existedLevel && existedLanguages && existedTools;\n\n                                }  else {\n                                    return existedRole && existedLevel && existedLanguages && existedTools;\n                                }\n                            }\n                        } \n                    }\n                }).map(job => {\n                    return (\n                        <RenderJob key={job.id} job={job} \n                        state={state} \n                        addRole={addRole} \n                        addLevel={addLevel}\n                        addLanguage={addLanguage}\n                        addTool={addTool}\n                        handleClick={handleClick} />\n                    );\n                })}\n            </>\n        );\n        \n    }\n}\n\nclass Jobs extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            role: null,\n            languages: [],\n            tools: [],\n            level: null\n        }\n    }\n\n    handleClick = (event) => {\n        const containerFilter = document.querySelector('.container-filter');\n        const filters = document.querySelector('.filter-box .filters');\n        const span = document.createElement('span');\n\n        span.innerHTML = event.target.innerHTML;\n\n        span.addEventListener('click', (e) => {\n\n            if (e.target.innerHTML === this.state.role) {\n                this.setState({role: null});\n                \n            } else if (e.target.innerHTML === this.state.level) {\n                this.setState({level: null});\n\n            } else if (this.state.languages.includes(e.target.innerHTML)) {\n                const position = this.state.languages.indexOf(e.target.innerHTML);\n                const languages = [...this.state.languages];\n                languages.splice(position, 1);\n                this.setState({languages: languages});\n\n            } else if (this.state.tools.includes(e.target.innerHTML)) {\n                const position = this.state.tools.indexOf(e.target.innerHTML);\n                const tools = [...this.state.tools];\n                tools.splice(position, 1);\n                this.setState({tools: tools});\n            }\n            span.remove();\n            const spans = document.querySelectorAll('.filter-box .filters span');\n            if (spans.length === 0) containerFilter.style.display = 'none';\n        });\n        filters.appendChild(span);\n\n        document.querySelector('.filter-box').appendChild(filters);\n        if (containerFilter.style.display === 'none') {\n            containerFilter.style.display = 'flex'; \n        }\n    }\n\n    clearFilters = () => {\n        this.setState({\n            role: null,\n            languages: [],\n            tools: [],\n            level: null\n        });\n        \n        const spans = document.querySelectorAll('.filter-box .filters span');\n\n        for (let span of spans) {\n            span.remove();\n        }\n        document.querySelector('.container-filter').style.display = 'none'\n    }\n\n    addRole = (value) => {\n        this.setState({role: value})\n    }\n\n    addLevel = (value) => {\n        this.setState({level: value})\n    }\n\n    addLanguage = (value) => {\n        this.setState({languages: this.state.languages.concat(value)});\n    }\n\n    addTool = (value) => {\n        this.setState({tools: this.state.tools.concat(value)});\n    }\n    \n    render() {\n        return (\n            <>\n                <div className=\"container container-filter\" style={{display: \"none\"}}>\n                    {/* {console.log(this.state)} */}\n                    <RenderFilterBox clearFilters={this.clearFilters} />\n                </div>\n                <motion.div className=\"container\">\n                    <List isLoading={this.props.isLoading}\n                        errMess={this.props.errMess}\n                        jobs={this.props.jobs}\n                        state={this.state}\n                        addRole={this.addRole}\n                        addLevel={this.addLevel}\n                        addLanguage={this.addLanguage}\n                        addTool={this.addTool}\n                        handleClick={this.handleClick} />\n                </motion.div>\n            </>\n    );\n}\n\n}\n\nexport default Jobs;\n","import React from 'react';\nimport { fetchJobs } from '../redux/Action_Creators';\nimport { connect } from 'react-redux';\nimport Header from './HeaderComponent';\nimport Jobs from './JobsComponent';\n\nconst mapStateToProps = state => {\n    return {\n      jobs: state.jobs\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchJobs: () => {dispatch(fetchJobs());}    \n});\n\nclass Main extends React.Component {\n    componentDidMount() {\n        this.props.fetchJobs();\n    }\n\n    render() {\n        return (\n            <>\n                <Header />\n                <Jobs jobs={this.props.jobs.jobs}\n                    isLoading={this.props.jobs.isLoading}\n                    errMess={this.props.jobs.errMess} />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","import React from 'react';\nimport './App.scss';\nimport { ConfigureStore } from './redux/configureStore';\nimport { Provider } from 'react-redux';\nimport Main from './components/MainComponent';\n\nconst store = ConfigureStore();\n\nclass App extends React.Component {\n\n  render(){\n    return (\n      <Provider store = {store}>\n        <Main />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Jobs } from './jobs';\nimport thunk from 'redux-thunk';\n\nexport const ConfigureStore = () => {\n    const store = createStore(combineReducers({\n        jobs: Jobs\n    }), \n        applyMiddleware(thunk)\n    );\n    \n    return store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport '../node_modules/@fortawesome/fontawesome-free/css/all.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}