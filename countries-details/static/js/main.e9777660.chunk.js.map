{"version":3,"sources":["redux/reducers/Countries.js","redux/Action_Types.js","redux/store.js","redux/Action_Creators.js","components/Loading.js","components/Filters.js","components/Countries.js","components/Details.js","components/Header.js","components/Main.js","shared/baseUrl.js","App.js","serviceWorker.js","index.js"],"names":["Countries","state","isLoading","errMess","countries","action","type","payload","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","addCountries","countriesLoading","countriesFailed","loadingCircleVariants","start","x","end","loadingCircleTransition","duration","yoyo","Infinity","ease","Loading","className","section","span","variants","initial","animate","transition","library","add","fas","faSearch","faAngleDown","Filters","changeName","isOpen","handleOpen","changeRegion","region","document","addEventListener","removeEventListener","icon","placeholder","onChange","e","target","value","onClick","style","transform","map","key","Math","random","containerVariants","y","in","out","tranistions","RenderCountry","length","name","trim","toLowerCase","to","slice","offset","perPage","country","alpha3Code","backgroundImage","flag","population","toLocaleString","capital","List","props","isDataLoading","isComponentLoading","exit","overflow","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","ceil","forcePage","currentPage","marginPagesDisplayed","pageRangeDisplayed","onPageChange","handlePageClick","containerClassName","activeClassName","setState","selectedPage","selected","this","filter","stateName","countryName","nameNotExist","regionNotExists","nameExists","includes","findAlpha2Code","alpha2Code","findAlpha3Code","findAltSpellings","altSpellings","alt","findNativeName","nativeName","checkIfNameMatches","checkIfAltSpellingsMatch","checkIfRegionMatches","Component","faArrowLeft","RenderDetails","subregion","topLevelDomain","domain","index","currencies","curr","languages","lang","borders","border","RenderBtn","position","margin","top","left","Details","undefined","display","padding","far","faMoon","faLightbulb","Header","checkIfChecked","element","root","documentElement","checked","setProperty","handleCheck","localStorage","setItem","JSON","parse","getItem","checkbox","querySelector","Main","fetchCountries","exitBeforeEnter","location","pathname","exact","path","component","match","params","withRouter","connect","dispatch","axios","get","then","response","data","catch","error","message","App","store","createStore","combineReducers","applyMiddleware","thunk","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e9777660.chunk.js","sourcesContent":["import * as Action_Types from '../Action_Types';\n\nexport const Countries = (state = {\n    isLoading: true, errMess: null, countries: []\n    }, action) => {\n\n        switch(action.type) {\n\n            case Action_Types.ADD_COUNTRIES:\n                return {...state, isLoading: false, errMess: null, countries: action.payload}\n\n            case Action_Types.COUNTRIES_LOADING:\n                return {...state, isLoading: true, errMess: null, countries: []}\n\n            case Action_Types.COUNTRIES_FAILED:\n                return {...state, isLoading: false, errMess: action.payload, countries: []}\n\n            default:\n                return state;\n        }\n}\n","export const ADD_COUNTRIES = 'ADD_COUNTRIES';\nexport const COUNTRIES_LOADING = 'COUNTRIES_LOADING';\nexport const COUNTRIES_FAILED = 'COUNTRIES_FAILED';\n","import { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport { Countries } from './reducers/Countries';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const Store = () => {\n    return createStore(combineReducers({\n        countries: Countries\n    }), \n        composeEnhancers(\n            applyMiddleware(thunk)\n        ));\n}\n","import axios from 'axios';\nimport * as Action_Types from './Action_Types';\nimport baseUrl from '../shared/baseUrl';\n\nexport const fetchCountries = () => dispatch => {\n    dispatch(countriesLoading(true));\n    axios.get(baseUrl)\n        .then(response => dispatch(addCountries(response.data.filter(country => {\n            return country.name === 'Palestine, State of' ? country.name = 'Palestine' : country.name !== 'Israel';\n        }))))\n        .catch(error => dispatch(countriesFailed(error.message)));\n}\n\nexport const addCountries = (countries) => ({\n    type: Action_Types.ADD_COUNTRIES,\n    payload: countries\n});\n\nexport const countriesLoading = () => ({\n    type: Action_Types.COUNTRIES_LOADING\n});\n\nexport const countriesFailed = (errMess) => ({\n    type: Action_Types.COUNTRIES_FAILED,\n    payload: errMess\n});\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst loadingCircleVariants = {\n    start: {\n        x: \"0%\"\n        \n    },\n    end: {\n        x: \"100%\"\n    }\n}\n\nconst loadingCircleTransition = {\n    duration: 0.4,\n    yoyo: Infinity,\n    ease: 'easeInOut'\n}\n\nconst Loading = () => {\n    return (\n        <section className=\"container container-loading\">\n            <motion.section className=\"loading\">\n                <motion.section>\n                    <motion.span className=\"loading-circle\" variants={loadingCircleVariants} \n                    initial=\"start\"\n                    animate=\"end\"\n                    transition={loadingCircleTransition} />\n\n                    <motion.span className=\"loading-circle\" variants={loadingCircleVariants} \n                    initial=\"start\"\n                    animate=\"end\"\n                    transition={loadingCircleTransition} />\n                    \n                    <motion.span className=\"loading-circle\" variants={loadingCircleVariants} \n                    initial=\"start\"\n                    animate=\"end\"\n                    transition={loadingCircleTransition} />\n                </motion.section>\n            </motion.section>\n        </section>\n    );\n}\n\nexport default Loading\n","import React from 'react';\nimport { faSearch, fas, faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\n\nlibrary.add(fas, faSearch, faAngleDown);\n\nconst Filters = ({changeName, isOpen, handleOpen, changeRegion, region}) => {\n    const regions = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania'];\n\n    isOpen ? document.addEventListener('click', handleOpen) : document.removeEventListener('click', handleOpen);\n    return (\n        <section className=\"container container-filter\">\n            <section className=\"filters\">\n                <section className=\"search\">\n                <FontAwesomeIcon icon={['fas', 'search']} /><input type=\"text\" placeholder=\"Search for a country...\" onChange={(e) => changeName(e.target.value)} />\n                </section>\n                <section className=\"select\">\n                    <section className=\"selected\" onClick={handleOpen}>\n                        {region === '' ? (<span>Filter by Region</span>) : (<span>{region}</span>)}\n                        <FontAwesomeIcon icon={['fas', 'angle-down']} />\n                    </section>\n                    <section className=\"list\" style={{transform: isOpen ? 'scale(1, 1)' : 'scale(0, 0)'}}>\n                        <ul>\n                            {region !== '' ? (<li onClick={() => {\n                                handleOpen();\n                                changeRegion('');\n                            }}>All</li>) : null}\n                            {regions.map(region => (\n                                <li key={Math.random()} onClick={() => {\n                                    handleOpen();\n                                    changeRegion(region);\n                                }}>{region}</li>\n                            ))}\n                        </ul>\n                    </section>\n                </section>\n            </section>\n        </section>\n    );\n}\n\nexport default Filters;\n","import React, { Component } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Loading from './Loading';\nimport Filters from './Filters';\nimport { Link } from 'react-router-dom';\nimport { motion } from 'framer-motion';\n\nconst containerVariants = {\n    initial: {\n        y: '100vh'\n    },\n    in: {\n        y: '0'\n    },\n    out: {\n        x: '-100vw',\n        transition: {\n            ease: 'easeInOut'\n        }\n    }\n}\n\nconst tranistions = {\n    transition: 'easeInOut'\n}\n\nconst RenderCountry = ({countries, state}) => {\n    return (\n        <>\n            {countries.length === 0 ? (\n                <p>Sorry, no countries found match <strong>{state.name}</strong> {state.region !== '' && state.name.trim().toLowerCase() !== 'israel' ? (<>in {state.region}</>) : null}</p>\n            ) : null}\n            {state.name.trim().toLowerCase() === 'israel' ? (<p>Did you mean <Link to=\"/home/PSE\"><strong>Palestine?</strong></Link></p>) : null}\n            {countries.slice(state.offset, state.offset + state.perPage).map(country => (\n                \n                    <motion.section className=\"box\" key={country.name}>\n                        <Link to={`/home/${country.alpha3Code}`}>\n                            <section className=\"img\" style={{backgroundImage: `url(${country.flag})`}}>\n                            </section>\n                            <p className=\"click\">Click to view details about <strong>{country.name}</strong></p>\n                            <section className=\"text\">\n                                <h3>{country.name}</h3>\n                                <p>Population: {country.population ? (<span>{country.population.toLocaleString()}</span>) : (<i>No informations found</i>)}</p>\n\n                                <p>Region: {country.region ? (<span>{country.region}</span>) : (<i>No informations found</i>)}</p>\n\n                                <p>Capital: {country.capital ? (<span>{country.capital}</span>) : (<i>No informations found</i>)}</p>\n                            </section>\n                        </Link>\n                    </motion.section>   \n                        \n            ))}\n        </>\n    );\n}\n\nconst List = (props) => {\n    if (props.isDataLoading) return (\n        <Loading />\n    );\n    else if (props.isComponentLoading) return (\n        <Loading />\n    );\n    else if (props.errMess) return (\n        <p>props.errMess</p>\n    );\n    else return (\n        <motion.section variants={containerVariants} initial=\"initial\" animate=\"in\" exit=\"out\" transition={tranistions} style={{overflow: 'hidden'}}>\n            <Filters changeName={props.changeName} \n            changeRegion={props.changeRegion}\n            region={props.region}\n            isOpen={props.isOpen} \n            handleOpen={props.handleOpen} />\n            <section className={`container${props.countries.length === 0 ? ' container-no-match' : ''}`}>\n                <RenderCountry countries={props.countries} state={props.state} />\n            </section>\n            {props.countries.length > 12 ? (\n                <section className=\"container container-pagination\">\n                    <ReactPaginate previousLabel={'Prev'}\n                        nextLabel={'Next'}\n                        breakLabel={'...'}\n                        breakClassName={'break'}\n                        pageCount={Math.ceil(props.countries.length / props.state.perPage)}\n                        forcePage={props.state.currentPage}\n                        marginPagesDisplayed={2}\n                        pageRangeDisplayed={5}\n                        onPageChange={props.handlePageClick}\n                        containerClassName={'pagination'}\n                        activeClassName={'active'}\n                    />\n                </section>\n            ) : null}\n            \n        </motion.section>\n    );\n}\n\nclass Countries extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            offset: 0,\n            perPage: 12,\n            currentPage: 0,\n            name: '',\n            region: '',\n            isLoading: true,\n            isOpen: false\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            isLoading: false\n        })\n    }\n\n    handleOpen = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    changeName = (value) => {\n        this.setState({name: value, offset: 0, currentPage: 0});\n    }\n\n    changeRegion = (value) => {\n        this.setState({region: value, offset: 0, currentPage: 0});\n    }\n\n    handlePageClick = (e) => {\n        const selectedPage = e.selected;\n        const offset = selectedPage * this.state.perPage;\n\n        this.setState({\n            currentPage: selectedPage,\n            offset: offset\n        })\n    }\n\n    render() {\n\n        return (\n            <List isComponentLoading={this.state.isLoading}\n                isDataLoading={this.props.isLoading}\n                errMess={this.props.errMess}\n                countries={this.props.countries.filter(country => {\n                    const stateName =  this.state.name.trim().toLowerCase();\n                    const countryName = country.name.trim().toLowerCase();\n\n                    const nameNotExist = this.state.name === '';\n                    const regionNotExists = this.state.region === '';\n        \n                    const nameExists = countryName.includes(stateName);\n\n                    const findAlpha2Code = stateName === country.alpha2Code.trim().toLowerCase();\n                    const findAlpha3Code = stateName === country.alpha3Code.trim().toLowerCase();\n                    \n                    const findAltSpellings = country.altSpellings.filter(alt => stateName.length > 4 ? alt.trim().toLowerCase().includes(stateName) : alt.trim().toLowerCase() === stateName);\n\n                    const checkIfAltSpellingsMatch = () => {\n                        for (let alt of findAltSpellings) {\n                            return alt;\n                        }\n                    }\n\n                    const findNativeName = country.nativeName.trim().toLowerCase().includes(stateName);\n\n                    const checkIfNameMatches = nameExists || findAlpha2Code || findAlpha3Code || checkIfAltSpellingsMatch() || findNativeName;\n\n                    const checkIfRegionMatches = this.state.region === country.region;\n\n                    if (nameNotExist && regionNotExists) {\n                        return country;\n\n                    } else if (!nameNotExist && regionNotExists) {\n                        return checkIfNameMatches;\n\n                    } else if (!regionNotExists && nameNotExist) {\n                        return checkIfRegionMatches;\n                        \n                    } else {\n                        return checkIfRegionMatches && checkIfNameMatches;\n                    }\n                })}\n                state={this.state}\n                changeName={this.changeName}\n                changeRegion={this.changeRegion}\n                region={this.state.region}\n                isOpen={this.state.isOpen}\n                handleOpen={this.handleOpen}\n                handlePageClick={this.handlePageClick} />\n        );\n    }\n}\n\nexport default Countries;\n","import React, { Component } from 'react';\nimport Loading from './Loading';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { fas, faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { motion } from 'framer-motion';\n\nlibrary.add(fas, faArrowLeft);\n\nconst variants = {\n    initial: {\n        x: '100vw'\n    },\n    in: {\n        x: '0'\n    },\n    out: {\n        x: '-100vw',\n        transition: {\n            ease: 'easeInOut'\n        }\n    }\n}\n\nconst tranistions = {\n    transition: 'linear'\n}\n\nconst RenderDetails = ({country, countries}) => {\n    return (\n        <section className=\"box details\" key={country.alpha3Code}>\n            <section className=\"img\" style={{backgroundImage: `url(${country.flag})`}}>            </section>\n            <section className=\"text\">\n                <section className=\"info\">\n                    <section>\n                        <h2>{country.name}</h2>\n                    </section>\n                    <section className=\"main\">\n                        <section>\n                            <p>Native Name: {country.nativeName ? (<span>{country.nativeName}</span>) : (<i>No informations found</i>)}</p>\n\n                            <p>Population: {country.population ? (<span>{country.population.toLocaleString()}</span>) : (<i>No informations found</i>)}</p>\n\n                            <p>Region: {country.region ? (<span>{country.region}</span>) : (<i>No informations found</i>)}</p>\n\n                            <p>Sub Region: {country.subregion ? (<span>{country.subregion}</span>) : (<i>No informations found</i>)}</p>\n\n                            <p>Capital: {country.capital ? (<span>{country.capital}</span>) : (<i>No informations found</i>)}</p>\n                        </section>\n                        <section className=\"other-info\">\n                            <p>Top Level Domain: {country.topLevelDomain.length !== 0 ? country.topLevelDomain.map((domain, index) => (<span key={Math.random()}>{(index ? ', ' : '') + domain}</span>)) : (<i>No informations found</i>)}</p>\n\n                            <p>Currencies: {country.currencies.length !== 0  ? country.currencies.map((curr, index) => (<span key={Math.random()}>{(index ? ', ' : '') + curr.name}</span>)) : (<i>No informations found</i>)}</p>\n\n                            <p>Languages: {country.languages.length !== 0  ? country.languages.map((lang, index) => (<span key={Math.random()}>{(index ? ', ' : '') + lang.name} \n                            </span>)) : (<i>No informations found</i>)}</p>\n                        </section>\n                    </section>\n                </section>\n                <section className=\"borders\">\n                    <p>Border Countries: {country.borders.length !== 0  ? country.borders.map(border => countries.filter(country => country.alpha3Code === border).map(country => (<Link to={`/home/${country.alpha3Code}`} key={country.alpha3Code}><span>{country.name} </span></Link>))) : (<i>No informations found</i>)}</p>\n                </section>\n            </section>\n        </section>\n    );\n}\n\nconst RenderBtn = () => {\n    return (\n        <section className=\"filters\" style={{position: 'relative', margin: '0 auto 0 0'}}>\n            <Link to=\"/home\" className='btn'><FontAwesomeIcon style={{position: 'absolute', top: '10px', left: '10px'}} icon={['fas', 'arrow-left']} /> Back</Link>\n        </section>\n    );\n}\n\nclass Details extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            isLoading: true\n        }\n    }\n\n    componentDidMount() {\n        this.setState({isLoading: false});\n    }\n\n    render() {\n        if (this.props.country !== undefined) return (\n            <motion.section variants={variants} initial=\"initial\" animate=\"in\" exit=\"out\" transition={tranistions} style={{overflow: 'hidden'}}>\n                <section className=\"container\" style={{display: \"flex\", padding: \"3% 5% 20px 5%\"}}>\n                    <RenderBtn />\n                </section>\n                <section className=\"container\" style={{display: \"block\"}}>\n                    <RenderDetails country={this.props.country} countries={this.props.countries} />\n                </section>\n            </motion.section>\n        );\n\n        else if (this.props.isLoading) return (\n            <Loading />\n        );\n\n        else if (this.state.isLoading) return (\n            <Loading />\n        );\n\n        else if (this.props.errMess) return (\n            <p>{this.props.errMess}</p>\n        );\n\n        else return null;\n    }\n}\n\nexport default Details;\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faMoon, faLightbulb } from '@fortawesome/free-solid-svg-icons';\nimport { far } from '@fortawesome/free-regular-svg-icons';\n\nlibrary.add(far, faMoon);\nlibrary.add(far, faLightbulb);\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checked: JSON.parse(localStorage.getItem('checked'))\n        }\n    }\n\n    checkIfChecked = (element) => {\n\n        const root = document.documentElement;\n        if (element.checked) {\n            root.style.setProperty('--bg', 'hsl(207, 26%, 17%)');\n            root.style.setProperty('--elements', 'hsl(209, 23%, 22%)');\n            root.style.setProperty('--text', 'hsl(0, 0%, 100%)');\n            root.style.setProperty('--btn', '#17183B');\n            root.style.setProperty('--input', 'hsl(0, 0%, 100%)');\n            root.style.setProperty('--focused', '#3E505B');\n\n        } else {\n            root.style.setProperty('--bg', 'hsl(0, 0%, 98%)');\n            root.style.setProperty('--elements', 'hsl(0, 0%, 100%)');\n            root.style.setProperty('--text', 'hsl(200, 15%, 8%)');\n            root.style.setProperty('--btn', '#A0C1B9');\n            root.style.setProperty('--input', 'hsl(0, 0%, 52%)');\n            root.style.setProperty('--focused', '#F5F5F5');\n        }\n    }\n\n    componentDidMount() {\n        const checkbox = document.querySelector('.header input');\n\n        checkbox.checked = this.state.checked;\n\n        this.checkIfChecked(checkbox);\n        \n    }\n    \n    handleCheck = (e) => {\n        localStorage.setItem('checked', e.target.checked);\n        this.checkIfChecked(e.target);\n        this.setState({\n            checked: e.target.checked\n        });\n    }\n\n    render() {\n        return (\n            <header>\n                <section className=\"header\">\n                    <h2>Where in the world?</h2>\n                    <label>\n                        {this.state.checked ? (\n                            <>\n                                <FontAwesomeIcon icon={['far', 'lightbulb']} /> <span>Light Mode</span>\n                            </>\n                        ): (\n                            <>\n                                <FontAwesomeIcon icon={['far', 'moon']} /> <span>Dark Mode</span>\n                            </>\n                        )}\n                        \n                        <input type=\"checkbox\" onClick={this.handleCheck} />\n                    </label>\n                </section>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { fetchCountries } from '../redux/Action_Creators';\nimport { connect } from 'react-redux';\nimport { withRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Countries from './Countries';\nimport Details from './Details';\nimport Header from './Header';\nimport { AnimatePresence } from 'framer-motion';\n\nconst mapStateToProps = state => ({\n    countries: state.countries\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCountries: () => {dispatch(fetchCountries())}\n});\n\nclass Main extends Component {\n\n    componentDidMount() {\n        this.props.fetchCountries();\n    }\n\n    render() {\n        return (\n            <>\n                <Header />\n                <AnimatePresence exitBeforeEnter>\n                    <Switch location={this.props.location} key={this.props.location.pathname}>\n                        <Route exact path='/home' component={() => <Countries countries={this.props.countries.countries}\n                        isLoading={this.props.countries.isLoading}\n                        errMess={this.props.countries.errMess} />} />\n\n                        <Route path='/home/:alpha3Code' component={({match}) =>\n                            <Details country={this.props.countries.countries.filter(country => match.params.alpha3Code === country.alpha3Code)[0]} \n                                countries={this.props.countries.countries}\n                                isLoading={this.props.countries.isLoading}\n                                errMess={this.props.countries.errMess} />} />\n\n                        <Redirect to='/home' />\n                    </Switch>\n                </AnimatePresence>\n            </>\n        );\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\n","const baseUrl = 'https://restcountries.eu/rest/v2/all';\n\nexport default baseUrl;\n","import React from 'react';\nimport './App.scss';\nimport { Provider } from 'react-redux';\nimport { Store } from './redux/store';\nimport Main from './components/Main';\nimport { HashRouter as Router } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Provider store={Store()}>\n      <Router>\n        <Main />\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}